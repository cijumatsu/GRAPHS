

import CLASSES.PrintDataStructure;
import CLASSES.Recursion;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphsGUI.java
 *
 * Created on Feb 5, 2011, 1:48:56 AM
 */

/**
 *
 * @author cijumatsu
 */
public class GraphsGUI extends javax.swing.JFrame {

    /** Creates new form GraphsGUI */
    public GraphsGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonRecursiveExponentiation = new javax.swing.JButton();
        ButtonAdjacencyMatrix = new javax.swing.JButton();
        ButtonStack = new javax.swing.JButton();
        ButtonRecursiveFactorial = new javax.swing.JButton();
        ButtonQueue = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonRecursiveExponentiation.setText("Recursive Exponentiation");
        ButtonRecursiveExponentiation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRecursiveExponentiationActionPerformed(evt);
            }
        });

        ButtonAdjacencyMatrix.setText("Adjacency Matrix (Array of Lists)");
        ButtonAdjacencyMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAdjacencyMatrixActionPerformed(evt);
            }
        });

        ButtonStack.setText("Stack");
        ButtonStack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStackActionPerformed(evt);
            }
        });

        ButtonRecursiveFactorial.setText("Recursive Factorial");
        ButtonRecursiveFactorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRecursiveFactorialActionPerformed(evt);
            }
        });

        ButtonQueue.setText("Queue");
        ButtonQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonQueueActionPerformed(evt);
            }
        });

        jButton1.setText("Added Button on Mac");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(100, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ButtonQueue)
                    .add(ButtonStack)
                    .add(ButtonAdjacencyMatrix))
                .add(71, 71, 71))
            .add(layout.createSequentialGroup()
                .add(96, 96, 96)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ButtonRecursiveFactorial)
                    .add(ButtonRecursiveExponentiation))
                .addContainerGap(120, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(190, Short.MAX_VALUE)
                .add(jButton1)
                .add(132, 132, 132))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(ButtonRecursiveExponentiation)
                .add(18, 18, 18)
                .add(ButtonRecursiveFactorial)
                .add(28, 28, 28)
                .add(ButtonAdjacencyMatrix)
                .add(18, 18, 18)
                .add(ButtonStack)
                .add(18, 18, 18)
                .add(ButtonQueue)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonRecursiveExponentiationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRecursiveExponentiationActionPerformed
        // TODO add your handling code here:
        
        Recursion r = new Recursion();
        r.power(2, 8);

    }//GEN-LAST:event_ButtonRecursiveExponentiationActionPerformed

    private void ButtonAdjacencyMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAdjacencyMatrixActionPerformed
        // TODO add your handling code here:
    
       ArrayList<ArrayList<String>> myList = new ArrayList<ArrayList<String>>();


        ArrayList<String> first = new ArrayList<String>();
        first.add("uno");
        first.add("due");
        first.add("tre");

         ArrayList<String> second = new ArrayList<String>();
        second.add("quatro");
        second.add("cinque");
        second.add("sei");

         ArrayList<String> third = new ArrayList<String>();
        third.add("siete");
        third.add("otto");
        third.add("nueve");

      //  ((ArrayList)myList.get(0)).add(first);
      //  ((ArrayList)myList.get(1)).add(second);
        myList.add(first);
        myList.add(second);

        System.out.println(((ArrayList)myList.get(0)).get(2));
        System.out.println(((ArrayList)myList.get(1)).get(2));



    }//GEN-LAST:event_ButtonAdjacencyMatrixActionPerformed

    private void ButtonStackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStackActionPerformed
        // TODO add your handling code here:

        PrintDataStructure print = new PrintDataStructure();

        Stack<Integer> stack = new Stack<Integer>();
        stack.push(3);
        System.out.print(stack.peek()+" ");
        stack.push(4);
        System.out.print(stack.peek()+" ");
        stack.push(1);
        System.out.print(stack.peek()+" ");
        stack.push(8);
        System.out.println(stack.peek()+" ");
        stack.pop();

        print.stack(stack);
        stack.pop();
        stack.pop();
        print.stack(stack);
        stack.push(9);
        print.stack(stack);
        


        
    }//GEN-LAST:event_ButtonStackActionPerformed

    private void ButtonQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonQueueActionPerformed
        // TODO add your handling code here:

        PrintDataStructure print = new PrintDataStructure();

        LinkedList queue = new LinkedList();
        //Queue queue = new LinkedList();


        //Using the add method to add items.
        //Should anything go wrong an exception will be thrown.
        queue.add("item1");
        queue.add("item2");

        //Using the offer method to add items.
        //Should anything go wrong it will just return false
        queue.offer("Item3");
        queue.offer("Item4");

        print.queue(queue);

        

        //Removing the first item from the queue.
        //If the queue is empty a java.util.NoSuchElementException will be thrown.
        
        queue.removeFirst();
        System.out.println("remove: " + queue.remove());


        queue.removeLast();
        queue.remove("item2");
        print.queue(queue);

        //Checking what item is first in line without removing it
        //If the queue is empty a java.util.NoSuchElementException will be thrown.
        System.out.println("element: " + queue.element());

        //Removing the first item from the queue.
        //If the queue is empty the method just returns false.
        System.out.println("poll: " + queue.poll());

        //Checking what item is first in line without removing it
        //If the queue is empty a null value will be returned.
        System.out.println("peek: " + queue.peek());

        

    }//GEN-LAST:event_ButtonQueueActionPerformed

    private void ButtonRecursiveFactorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRecursiveFactorialActionPerformed
        // TODO add your handling code here:
        Recursion r = new Recursion();
        int x = r.factorial(5);
        System.out.println("THE VERY FINAL RESULT IS : " + x);

    }//GEN-LAST:event_ButtonRecursiveFactorialActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdjacencyMatrix;
    private javax.swing.JButton ButtonQueue;
    private javax.swing.JButton ButtonRecursiveExponentiation;
    private javax.swing.JButton ButtonRecursiveFactorial;
    private javax.swing.JButton ButtonStack;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
